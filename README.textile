h1. Introduction

Jsonj is a framework for working with json in Java the "proper" way. No mappings or model classes, it's all just lovely json, but in Java.

"some example code":https://github.com/jillesvangurp/jsonj/blob/master/src/test/java/com/github/jsonj/ShowOffTheFramework.java

h1. Changelog

* 0.4 Bug fixes, changed groupid, documentation.
* 0.3 Several new methods added in JsonArray and JsonObject; fixed the parser bug where nested arrays and objects were not handled correctly.
* 0.2 Several bug fixes
* 0.1 First release

h1. What's with the name

It's pronounced json-j, or jasonjay. It doesn't mean anything in particular other than "json for java", or something. Well, trying to come up with a name that is not already used is quite a challenge and I wanted to stuff the acronym json in there, keep it short, and not have the first hit on Google be something else than this. So, jsonj it is.

h1. Why another framework?

There are many frameworks for handling Json in java. So why create another one? From my point of view these frameworks are all flawed in one or more of the following ways:
# they assume the user has model classes that need to be serialized and deserialized to and from java
# they use an internal representation of the various json types that is not very friendly to work with if you want to manipulate them directly
# they don't treat json as a first class entity and merely try to hide the fact that your data is stored as json
# they don't use the Java collections framework
# they use final classes, so your options to work around any limitations are a bit limited.

Don't get me wrong, some of these frameworks are excellent. And some of these frameworks are quite usable even if you do use them the way I want to use them.

However, from having used one of them extensively (GSon), I have learned that there is room for improvement. Since we're talking the type of improvement that is likely backwards compatibility breaking (i.e. not very likely to be implemented in one of the existing frameworks), I went ahead and created my solution.

h1. For who is this framework intended

Anyone who plans to write a lot of business logic in Java that manipulates json data structures and who doesn't wish to write model classes in Java to hide the fact that json is being used. If you are like me, you feel somewhat stuck having to deal with awkward json frameworks while all the cool Ruby,Python, and Javascript kids get to use a serialization that is natively supported in their language. This framework is for you.

h1. What is offered in the framework

# Familiarity: a JsonArray class that extends LinkedList, a JsonObject class that extends LinkedHashMap, s JsonPrimitive class that wraps Number, String, Boolean, and null. Also, all these classes implement JsonElement, so you can have type safety. In other words, you will find a very familiar API to work with these types.
# Convenient, json specific extensions to the collections API in JsonArray and JsonObject.
# A fast, easy to use parser that uses the excellent json-simple framework.
# A pretty printing (optional) serializer.
# A nice builder class that will drastically reduce the usage of the keyword new in your code.

h1. Which version should I use?

The latest. Seriously, the older versions have bugs that I know about and already fixed. Why take the risk?

h1. What can you expect in terms of maintenance and continuity?

The code should be fine as is but I don't plan on providing lots of support. That's why it is on github: feel free to fork, clone & own, or do whatever you need to do to make this code work for you.

h1. How to build jsonj

@mvn clean install@ should do the trick with maven 3.x (and probably 2.x as well). I'm not a big maven fan but this is a relatively trivial project and it's just easier this way.

h1. Where is the documentation?

Look at the javadoc and the tests. Particularly "this one here":https://github.com/jillesvangurp/jsonj/blob/master/src/test/java/com/github/jsonj/ShowOffTheFramework.java shows off most of the features this framework has.

h1. License

The license is the MIT license, a.k.a. the expat license. The rationale for choosing this license is that I want to maximize your freedom to do whatever you want with the code while limiting my liability for the damage this code could potentially do. I do appreciate attribution but not enough to require it in the license (beyond the obligatory copyright notice).

h1. Acknowledgements

# I've been greatly influenced by the classes representing the json primitives in the GSon framework. If only they implemented Map and List and weren't final. But lovely framework and would use it again.
# I spend quite a bit of time figuring out a way of parsing Json that didn't involve me generating a lot of source code with javacc, antlr or similar tools. Then I stumpled onto json-simple and wrote the parser for jsonj in under two hours with a custom content handler. It seems to work and alledgedly json-simple is pretty fast as well.
# This code is very loosely based on work I did at work with several colleagues. No code was copy pasted but I definitely took some ideas and improved on them. You know who you are. Thanks.